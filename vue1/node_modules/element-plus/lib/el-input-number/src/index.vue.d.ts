declare const _default: import("vue").DefineComponent<Readonly<import("vue").ComponentPropsOptions<{
    [x: string]: unknown;
}>>, {
    input: any;
    displayValue: import("vue").ComputedRef<string | number>;
    handleInput: (value: any) => any;
    handleInputChange: (value: any) => void;
    controlsAtRight: import("vue").ComputedRef<boolean>;
    decrease: () => void;
    increase: () => void;
    inputNumberSize: import("vue").ComputedRef<any>;
    inputNumberDisabled: import("vue").ComputedRef<any>;
    maxDisabled: import("vue").ComputedRef<boolean>;
    minDisabled: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "input" | "blur" | "focus")[], "update:modelValue" | "change" | "input" | "blur" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<({
    [x: number]: string;
} & {
    [Symbol.iterator]?: IterableIterator<string>;
    length?: number;
    toString?: string;
    toLocaleString?: string;
    concat?: string[];
    join?: string;
    slice?: string[];
    indexOf?: {
        (searchElement: string, fromIndex?: number): number;
        (searchElement: string, fromIndex?: number): number;
    };
    lastIndexOf?: {
        (searchElement: string, fromIndex?: number): number;
        (searchElement: string, fromIndex?: number): number;
    };
    every?: {
        <S extends string>(predicate: (value: string, index: number, array: readonly string[]) => value is S, thisArg?: any): this is readonly S[];
        (predicate: (value: string, index: number, array: readonly string[]) => unknown, thisArg?: any): boolean;
        <S_1 extends string>(predicate: (value: string, index: number, array: readonly string[]) => value is S_1, thisArg?: any): this is readonly S_1[];
        (predicate: (value: string, index: number, array: readonly string[]) => unknown, thisArg?: any): boolean;
    };
    some?: {
        (predicate: (value: string, index: number, array: readonly string[]) => unknown, thisArg?: any): boolean;
        (predicate: (value: string, index: number, array: readonly string[]) => unknown, thisArg?: any): boolean;
    };
    forEach?: {
        (callbackfn: (value: string, index: number, array: readonly string[]) => void, thisArg?: any): void;
        (callbackfn: (value: string, index: number, array: readonly string[]) => void, thisArg?: any): void;
    };
    map?: {
        <U>(callbackfn: (value: string, index: number, array: readonly string[]) => U, thisArg?: any): U[];
        <U_1>(callbackfn: (value: string, index: number, array: readonly string[]) => U_1, thisArg?: any): U_1[];
    };
    filter?: {
        <S_2 extends string>(predicate: (value: string, index: number, array: readonly string[]) => value is S_2, thisArg?: any): S_2[];
        (predicate: (value: string, index: number, array: readonly string[]) => unknown, thisArg?: any): string[];
        <S_3 extends string>(predicate: (value: string, index: number, array: readonly string[]) => value is S_3, thisArg?: any): S_3[];
        (predicate: (value: string, index: number, array: readonly string[]) => unknown, thisArg?: any): string[];
    };
    reduce?: {
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string): string;
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string, initialValue: string): string;
        <U_2>(callbackfn: (previousValue: U_2, currentValue: string, currentIndex: number, array: readonly string[]) => U_2, initialValue: U_2): U_2;
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string): string;
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string, initialValue: string): string;
        <U_3>(callbackfn: (previousValue: U_3, currentValue: string, currentIndex: number, array: readonly string[]) => U_3, initialValue: U_3): U_3;
    };
    reduceRight?: {
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string): string;
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string, initialValue: string): string;
        <U_4>(callbackfn: (previousValue: U_4, currentValue: string, currentIndex: number, array: readonly string[]) => U_4, initialValue: U_4): U_4;
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string): string;
        (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: readonly string[]) => string, initialValue: string): string;
        <U_5>(callbackfn: (previousValue: U_5, currentValue: string, currentIndex: number, array: readonly string[]) => U_5, initialValue: U_5): U_5;
    };
    find?: {
        <S_4 extends string>(predicate: (this: void, value: string, index: number, obj: readonly string[]) => value is S_4, thisArg?: any): S_4;
        (predicate: (value: string, index: number, obj: readonly string[]) => unknown, thisArg?: any): string;
        <S_5 extends string>(predicate: (this: void, value: string, index: number, obj: readonly string[]) => value is S_5, thisArg?: any): S_5;
        (predicate: (value: string, index: number, obj: readonly string[]) => unknown, thisArg?: any): string;
    };
    findIndex?: {
        (predicate: (value: string, index: number, obj: readonly string[]) => unknown, thisArg?: any): number;
        (predicate: (value: string, index: number, obj: readonly string[]) => unknown, thisArg?: any): number;
    };
    entries?: IterableIterator<[number, string]>;
    keys?: IterableIterator<number>;
    values?: IterableIterator<string>;
    includes?: {
        (searchElement: string, fromIndex?: number): boolean;
        (searchElement: string, fromIndex?: number): boolean;
    };
    flatMap?: {
        <U_6, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U_6 | readonly U_6[], thisArg?: This): U_6[];
        <U_7, This_1 = undefined>(callback: (this: This_1, value: string, index: number, array: string[]) => U_7 | readonly U_7[], thisArg?: This_1): U_7[];
    };
    flat?: unknown[];
}) | ({} & {
    [x: string]: unknown;
})>, {
    [x: number]: string;
} | {}>;
export default _default;
